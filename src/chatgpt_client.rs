use std::{
    io::{stdout, BufRead, BufReader, Write},
    usize::MAX,
};

use crate::{
    api_response::{ChatCompletionChunk, Models},
    chat_message,
};
use requestty::Question;
use reqwest::blocking::Client;
use serde_json::json;

pub struct ChatGPTClient {
    openai_token: String,
    model: Option<String>,
    client: Client,
}

impl ChatGPTClient {
    pub fn new(openai_token: String) -> Self {
        Self {
            openai_token,
            model: None,
            client: Client::new(),
        }
    }

    pub fn select_model(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        let url = "https://api.openai.com/v1/models";
        let headers = self.generate_headers()?;
        let response = self.get_request(url, headers)?;

        let models: Models = response.json()?;
        let gpts = models.get_gpts();

        let select = Question::select("theme")
            .should_loop(false)
            .message("ü§ñ ChatGPT„ÅÆ„É¢„Éá„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ (Ctrl+c to exit)")
            .choices(gpts)
            .default(0)
            .build();

        let answer = requestty::prompt_one(select)?;
        let model = &answer.as_list_item().unwrap().text;
        self.model = Some(model.to_owned());

        Ok(())
    }

    pub fn send_messages(
        &self,
        message_history: &chat_message::MessageHistory,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let url = "https://api.openai.com/v1/chat/completions";
        let headers = self.generate_headers()?;
        let body = self.generate_body_from_history(message_history);
        let response = self.send_post_request(url, headers, body)?;
        let joined_string = self.print_chat_stream(response)?;
        println!();
        Ok(joined_string)
    }

    // API„Å∏ÈÄÅ‰ø°„Åô„Çãbody„Çí‰ΩúÊàê„Åô„Çã„ÄÇ
    // „É°„ÉÉ„Çª„Éº„Ç∏Â±•Ê≠¥„ÅØÂÖ®„Å¶ÈÄ£Áµê„Åó„Å¶ÈÄÅ„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã„ÄÇ
    fn generate_body_from_history(
        &self,
        message_history: &chat_message::MessageHistory,
    ) -> serde_json::Value {
        let messages = message_history
            .messages
            .iter()
            .map(|m| json!({"role": m.role.to_string(), "content": m.content}))
            .collect::<Vec<_>>();

        let model = self.model.as_ref().unwrap();

        json!({
            "top_p": 0.5,
            "stream": true,
            "model": model,
            "messages": messages,
        })
    }

    fn get_request(
        &self,
        url: &str,
        headers: reqwest::header::HeaderMap,
    ) -> Result<reqwest::blocking::Response, Box<dyn std::error::Error>> {
        let res = self.client.get(url).headers(headers).send()?;

        Ok(res)
    }

    fn send_post_request(
        &self,
        url: &str,
        headers: reqwest::header::HeaderMap,
        body: serde_json::Value,
    ) -> Result<reqwest::blocking::Response, Box<dyn std::error::Error>> {
        let res = self
            .client
            .post(url)
            .headers(headers)
            .json(&body)
            .send()?
            .error_for_status()?;

        Ok(res)
    }

    // API„ÇíÂëº„Å≥Âá∫„Åô„ÅÆ„Å´ÂøÖË¶Å„Å™„Éò„ÉÉ„ÉÄ„Éº„ÇíÁîüÊàê„Åô„Çã
    fn generate_headers(&self) -> Result<reqwest::header::HeaderMap, Box<dyn std::error::Error>> {
        let mut headers = reqwest::header::HeaderMap::new();
        headers.insert(
            "Content-Type",
            reqwest::header::HeaderValue::from_static("application/json"),
        );
        headers.insert(
            "Authorization",
            reqwest::header::HeaderValue::from_str(&format!("Bearer {}", self.openai_token))?,
        );
        Ok(headers)
    }

    // print_chat_stream
    //
    // API„Åã„Çâ‰∏ãË®ò„ÅÆ„Çà„ÅÜ„Å™„Éá„Éº„Çø„ÅåÈÄ£Á∂ö„Åó„Å¶ÈÄÅ„Çâ„Çå„Å¶„Åè„Çã„ÅÆ„Åß„ÄÅ`choices[0].delta.content`„ÇíÂèñÂæó„Åó„Å¶ÈÄêÊ¨°Print„Åô„Çã„ÄÇ
    //
    // ‰ª•‰∏ã„ÅÆ„Çà„ÅÜ„Å™„Éá„Éº„Çø„ÅåÈÄÅ„Çâ„Çå„Å¶„Åè„Çã:
    // ```
    // data: {"id":"chatcmpl-6qPcoOfhzpOdqX9iqRazRUQyjQ2fm","object":"chat.completion.chunk","created":1677949578,"model":"gpt-3.5-turbo-0301","choices":[{"delta":{"role":"assistant"},"index":0,"finish_reason":null}]}
    //
    // data: {"id":"chatcmpl-6qPcoOfhzpOdqX9iqRazRUQyjQ2fm","object":"chat.completion.chunk","created":1677949578,"model":"gpt-3.5-turbo-0301","choices":[{"delta":{"content":"„Åï„Çå"},"index":0,"finish_reason":null}]}
    //
    // data: {"id":"chatcmpl-6qPcoOfhzpOdqX9iqRazRUQyjQ2fm","object":"chat.completion.chunk","created":1677949578,"model":"gpt-3.5-turbo-0301","choices":[{"delta":{"content":"„Åæ„Åô"},"index":0,"finish_reason":null}]}
    //
    // data: {"id":"chatcmpl-6qPcoOfhzpOdqX9iqRazRUQyjQ2fm","object":"chat.completion.chunk","created":1677949578,"model":"gpt-3.5-turbo-0301","choices":[{"delta":{"content":"„ÄÇ"},"index":0,"finish_reason":null}]}
    //
    // data: {"id":"chatcmpl-6qPcoOfhzpOdqX9iqRazRUQyjQ2fm","object":"chat.completion.chunk","created":1677949578,"model":"gpt-3.5-turbo-0301","choices":[{"delta":{},"index":0,"finish_reason":"stop"}]}
    //
    // data: [DONE]
    // ```
    //
    // `data: [DONE]` „ÅåÈÄÅ„Çâ„Çå„Å¶„Åç„Åü„ÇâË™≠„ÅøËæº„Åø„ÇíÁµÇ‰∫Ü„Åó„ÄÅ„É´„Éº„Éó„ÇíÊäú„Åë„Çã„ÄÇ
    //
    // ÈÄÅ„Çâ„Çå„Å¶„Åç„Åü `choices[0].delta.content` „ÅØ `joined_string`„Å´ÈÄ£Áµê„Åó„ÄÅÊúÄÂæå„Å´Ëøî„Åô„ÄÇ
    fn print_chat_stream(
        &self,
        response: reqwest::blocking::Response,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let mut joined_string = String::new();

        // „É¨„Çπ„Éù„É≥„Çπ„ÇíË™≠„ÅøËæº„ÇÄ„Åü„ÇÅ„ÅÆ„É™„Éº„ÉÄ„Éº„Çí‰ΩúÊàê„Åô„Çã
        let reader = BufReader::new(response);

        // API„Åã„Çâ„ÅÆÂõûÁ≠î„ÅåÊ®™„Å´Èï∑„ÅÑÂ†¥Âêà„ÅØ„ÄÅË™≠„Åø„Å•„Çâ„ÅÑ„ÅÆ„ÅßÊîπË°å„Åô„Çã„ÄÇ
        // „Åü„Å†„ÄÅÈÅ©Âàá„Å™ÊîπË°å„ÇíË°å„ÅÜ„Åü„ÇÅ„Å´„ÅØTerminal„ÅÆÂπÖ„ÇíÂèñÂæó„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã„Åü„ÇÅ„ÄÅ
        // ÁèæÁä∂„ÅØMAX„Çí‰ªÆ„ÅßË®≠ÂÆö„Åó„ÄÅÂÆüË≥™ÁöÑ„Å´ÈÄî‰∏≠„ÅÆÂº∑Âà∂ÊîπË°å„ÅåÁô∫Áîü„Åó„Å™„ÅÑ„Çà„ÅÜ„Å´„Åó„Å¶„ÅÑ„Çã„ÄÇ
        let mut line_length = 0;
        let max_line_length = MAX;

        // „É¨„Çπ„Éù„É≥„Çπ„ÅÆÂêÑË°å„ÇíÂá¶ÁêÜ„Åô„Çã
        for line in reader.lines() {
            let line = line?;

            // „É´„Éº„Éó„ÇíÊäú„Åë„Çã„Åü„ÇÅ„ÅÆÊù°‰ª∂
            if line == "data: [DONE]" {
                break;
            }

            // "data: "„ÅßÂßã„Åæ„ÇãÂêÑË°å„ÇíÂá¶ÁêÜ„Åô„Çã
            if let Some(data) = line.strip_prefix("data: ") {
                let chunk: ChatCompletionChunk = serde_json::from_str(data.trim())?;

                // ÈÅ∏ÊäûËÇ¢„ÅÆÂêÑË¶ÅÁ¥†„ÇíÂá¶ÁêÜ„Åô„Çã
                for choice in chunk.choices {
                    if let Some(content) = choice.delta.content {
                        // ÈÄêÊ¨°Print„Åô„Çã
                        print!("{}", content);

                        // ÈÄêÊ¨°ÈÄ£Áµê„Åô„Çã
                        joined_string.push_str(&content);

                        // ÊîπË°å„Ç≥„Éº„Éâ„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØÊñáÂ≠óÊï∞„Çí„É™„Çª„ÉÉ„Éà„Åô„Çã
                        if content.contains('\n') {
                            line_length = 0;
                        }

                        // ÊñáÂ≠óÊï∞„Çí„Éó„É©„Çπ„Åô„Çã„ÄÇ
                        // UTF-8ÊñáÂ≠ó„Å®„Åó„Å¶„Ç´„Ç¶„É≥„Éà„Åó„Åü„ÅÑ„ÅÆ„Åß„ÄÅchars().count()„Çí‰Ωø„ÅÜ„ÄÇ
                        // https://doc.rust-lang.org/std/string/struct.String.html#utf-8
                        line_length += content.chars().count();

                        // 100ÊñáÂ≠ó„Å´ÈÅî„Åó„ÅüÂ†¥Âêà„ÅØÊîπË°å„Åô„Çã
                        if line_length >= max_line_length {
                            println!();
                            line_length = 0;
                        }

                        // ÈÄêÊ¨°Print„Åó„Åü„ÇÇ„ÅÆ„ÇíÂç≥Â∫ß„Å´Ë°®Á§∫„Åô„Çã
                        stdout().flush().unwrap();
                    }
                }
            }
        }

        Ok(joined_string)
    }
}

#[cfg(test)]
mod tests {
    use std::env;

    use super::*;

    #[test]
    fn select_model() {
        let openai_token = env::var("OPENAI_API_KEY").expect("OPENAI_API_KEY must be set");
        let mut client = ChatGPTClient::new(openai_token);

        let result = client.select_model();
        assert!(result.is_ok());
    }
}
